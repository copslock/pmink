/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : ./asn1.g
 *     -                            On : 2013-06-07 15:07:02
 *     -                 for the lexer : asn1LexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer asn1Lexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pasn1Lexer, which is returned from a call to asn1LexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in pasn1Lexer are  as follows:
 *
 *  -  void      pasn1Lexer->A_ROND(pasn1Lexer)
 *  -  void      pasn1Lexer->STAR(pasn1Lexer)
 *  -  void      pasn1Lexer->ASSIGN_OP(pasn1Lexer)
 *  -  void      pasn1Lexer->BOOLEAN_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->TRUE_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->FALSE_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->DOT(pasn1Lexer)
 *  -  void      pasn1Lexer->DOUBLE_DOT(pasn1Lexer)
 *  -  void      pasn1Lexer->ELLIPSIS(pasn1Lexer)
 *  -  void      pasn1Lexer->APOSTROPHE(pasn1Lexer)
 *  -  void      pasn1Lexer->AMPERSAND(pasn1Lexer)
 *  -  void      pasn1Lexer->LESS_THAN(pasn1Lexer)
 *  -  void      pasn1Lexer->GREATER_THAN(pasn1Lexer)
 *  -  void      pasn1Lexer->LESS_THAN_SLASH(pasn1Lexer)
 *  -  void      pasn1Lexer->SHASH_GREATER_THEN(pasn1Lexer)
 *  -  void      pasn1Lexer->TRUE_SMALL_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->FALSE_SMALL_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->INTEGER_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->IA5_STRING_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->PRINTABLE_STRING_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->NUMERIC_STRING_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->L_BRACE(pasn1Lexer)
 *  -  void      pasn1Lexer->R_BRACE(pasn1Lexer)
 *  -  void      pasn1Lexer->COMMA(pasn1Lexer)
 *  -  void      pasn1Lexer->L_PARAN(pasn1Lexer)
 *  -  void      pasn1Lexer->R_PARAN(pasn1Lexer)
 *  -  void      pasn1Lexer->MINUS(pasn1Lexer)
 *  -  void      pasn1Lexer->ENUMERATED_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->REAL_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->PLUS_INFINITY_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->MINUS_INFINITY_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->BIT_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->STRING_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->CONTAINING_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->OCTET_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->NULL_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->SEQUENCE_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->OPTIONAL_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->DEFAULT_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->COMPONENTS_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->OF_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->SET_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->EXCLAM(pasn1Lexer)
 *  -  void      pasn1Lexer->ALL_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->EXCEPT_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->POWER(pasn1Lexer)
 *  -  void      pasn1Lexer->PIPE(pasn1Lexer)
 *  -  void      pasn1Lexer->UNION_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->INTERSECTION_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->INCLUDES_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->MIN_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->MAX_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->SIZE_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->FROM_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->WITH_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->COMPONENT_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->PRESENT_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->ABSENT_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->PATTERN_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->TYPE_IDENTIFIER_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->ABSTRACT_SYNTAX_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->CLASS_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->UNIQUE_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->SYNTAX_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->L_BRACKET(pasn1Lexer)
 *  -  void      pasn1Lexer->R_BRACKET(pasn1Lexer)
 *  -  void      pasn1Lexer->INSTANCE_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->SEMI_COLON(pasn1Lexer)
 *  -  void      pasn1Lexer->IMPORTS_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->EXPORTS_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->EXTENSIBILITY_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->IMPLIED_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->EXPLICIT_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->TAGS_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->IMPLICIT_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->AUTOMATIC_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->DEFINITIONS_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->BEGIN_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->END_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->DOUBLE_L_BRACKET(pasn1Lexer)
 *  -  void      pasn1Lexer->DOUBLE_R_BRACKET(pasn1Lexer)
 *  -  void      pasn1Lexer->COLON(pasn1Lexer)
 *  -  void      pasn1Lexer->CHOICE_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->UNIVERSAL_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->APPLICATION_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->PRIVATE_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->EMBEDDED_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->PDV_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->OBJECT_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->IDENTIFIER_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->RELATIVE_OID_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->CHARACTER_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->CONSTRAINED_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->BY_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->A_ROND_DOT(pasn1Lexer)
 *  -  void      pasn1Lexer->ENCODED_LITERAL(pasn1Lexer)
 *  -  void      pasn1Lexer->COMMENT(pasn1Lexer)
 *  -  void      pasn1Lexer->UNRESTRICTEDCHARACTERSTRINGTYPE(pasn1Lexer)
 *  -  void      pasn1Lexer->EXTENSTIONENDMARKER(pasn1Lexer)
 *  -  void      pasn1Lexer->DIGIT(pasn1Lexer)
 *  -  void      pasn1Lexer->UPPER(pasn1Lexer)
 *  -  void      pasn1Lexer->LOWER(pasn1Lexer)
 *  -  void      pasn1Lexer->NUMBER(pasn1Lexer)
 *  -  void      pasn1Lexer->WS(pasn1Lexer)
 *  -  void      pasn1Lexer->Exponent(pasn1Lexer)
 *  -  void      pasn1Lexer->LINE_COMMENT(pasn1Lexer)
 *  -  void      pasn1Lexer->BSTRING(pasn1Lexer)
 *  -  void      pasn1Lexer->HEXDIGIT(pasn1Lexer)
 *  -  void      pasn1Lexer->HSTRING(pasn1Lexer)
 *  -  void      pasn1Lexer->CSTRING(pasn1Lexer)
 *  -  void      pasn1Lexer->EscapeSequence(pasn1Lexer)
 *  -  void      pasn1Lexer->LETTER(pasn1Lexer)
 *  -  void      pasn1Lexer->JavaIDDigit(pasn1Lexer)
 *  -  void      pasn1Lexer->IDENTIFIER(pasn1Lexer)
 *  -  void      pasn1Lexer->Tokens(pasn1Lexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_asn1Lexer_H
#define _asn1Lexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct asn1Lexer_Ctx_struct asn1Lexer, * pasn1Lexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/** Context tracking structure for asn1Lexer
 */
struct asn1Lexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mA_ROND)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mSTAR)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mASSIGN_OP)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mBOOLEAN_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mTRUE_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mFALSE_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mDOT)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mDOUBLE_DOT)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mELLIPSIS)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mAPOSTROPHE)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mAMPERSAND)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mLESS_THAN)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mGREATER_THAN)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mLESS_THAN_SLASH)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mSHASH_GREATER_THEN)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mTRUE_SMALL_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mFALSE_SMALL_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mINTEGER_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mIA5_STRING_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mPRINTABLE_STRING_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mNUMERIC_STRING_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mL_BRACE)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mR_BRACE)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mCOMMA)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mL_PARAN)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mR_PARAN)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mMINUS)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mENUMERATED_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mREAL_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mPLUS_INFINITY_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mMINUS_INFINITY_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mBIT_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mSTRING_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mCONTAINING_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mOCTET_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mNULL_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mSEQUENCE_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mOPTIONAL_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mDEFAULT_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mCOMPONENTS_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mOF_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mSET_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mEXCLAM)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mALL_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mEXCEPT_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mPOWER)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mPIPE)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mUNION_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mINTERSECTION_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mINCLUDES_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mMIN_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mMAX_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mSIZE_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mFROM_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mWITH_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mCOMPONENT_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mPRESENT_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mABSENT_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mPATTERN_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mTYPE_IDENTIFIER_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mABSTRACT_SYNTAX_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mCLASS_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mUNIQUE_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mSYNTAX_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mL_BRACKET)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mR_BRACKET)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mINSTANCE_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mSEMI_COLON)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mIMPORTS_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mEXPORTS_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mEXTENSIBILITY_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mIMPLIED_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mEXPLICIT_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mTAGS_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mIMPLICIT_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mAUTOMATIC_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mDEFINITIONS_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mBEGIN_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mEND_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mDOUBLE_L_BRACKET)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mDOUBLE_R_BRACKET)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mCOLON)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mCHOICE_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mUNIVERSAL_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mAPPLICATION_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mPRIVATE_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mEMBEDDED_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mPDV_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mOBJECT_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mIDENTIFIER_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mRELATIVE_OID_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mCHARACTER_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mCONSTRAINED_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mBY_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mA_ROND_DOT)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mENCODED_LITERAL)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mCOMMENT)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mUNRESTRICTEDCHARACTERSTRINGTYPE)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mEXTENSTIONENDMARKER)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mDIGIT)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mUPPER)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mLOWER)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mNUMBER)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mWS)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mExponent)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mLINE_COMMENT)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mBSTRING)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mHEXDIGIT)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mHSTRING)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mCSTRING)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mEscapeSequence)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mLETTER)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mJavaIDDigit)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mIDENTIFIER)	(struct asn1Lexer_Ctx_struct * ctx);
     void (*mTokens)	(struct asn1Lexer_Ctx_struct * ctx);    const char * (*getGrammarFileName)();
    void	    (*free)   (struct asn1Lexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pasn1Lexer asn1LexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API pasn1Lexer asn1LexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define MODULE_ID      102
#define NODE_COMPONENT      115
#define SEQUENCE_LITERAL      40
#define STAR      5
#define IDENTIFIER_NODE      105
#define LETTER      133
#define RELATIVE_OID_LITERAL      94
#define ABSENT_LITERAL      61
#define DEFINITION_NODE      108
#define EOF      -1
#define NUMERIC_STRING_LITERAL      24
#define AUTOMATIC_LITERAL      79
#define DOUBLE_DOT      11
#define DEFAULT_LITERAL      42
#define ASSIGN_OP      6
#define STRING_LITERAL      36
#define IDENTIFIER_LITERAL      93
#define REAL_LITERAL      32
#define BIT_LITERAL      35
#define PATTERN_LITERAL      62
#define OCTET_LITERAL      38
#define R_PARAN      29
#define TRUE_LITERAL      8
#define CHOICE_LITERAL      86
#define APOSTROPHE      13
#define COMMENT      100
#define APPLICATION_LITERAL      88
#define FALSE_SMALL_LITERAL      20
#define LESS_THAN_SLASH      17
#define OPTIONAL_LITERAL      41
#define LINE_COMMENT      128
#define IMPLICIT_LITERAL      78
#define NUMBER      119
#define ELLIPSIS      12
#define L_BRACE      25
#define CHARACTER_LITERAL      95
#define POWER      49
#define SEMI_COLON      71
#define NULL_LITERAL      39
#define DEFINITIONS_NODE      104
#define UNION_LITERAL      51
#define PLUS_INFINITY_LITERAL      33
#define ABSTRACT_SYNTAX_LITERAL      64
#define EXCEPT_LITERAL      48
#define INSTANCE_LITERAL      70
#define COMPONENT_LITERAL      59
#define END_LITERAL      82
#define ENUMERATED_LITERAL      31
#define INCLUDES_LITERAL      53
#define WS      126
#define BSTRING      121
#define EMBEDDED_LITERAL      90
#define CLASS_LITERAL      65
#define DOUBLE_L_BRACKET      83
#define INTEGER_LITERAL      21
#define LESS_THAN      15
#define JavaIDDigit      134
#define SYNTAX_LITERAL      67
#define EXPORTS_LITERAL      73
#define SET_LITERAL      45
#define CSTRING      132
#define LOWER      125
#define IMPORTS_NODE      110
#define BEGIN_LITERAL      81
#define ALL_LITERAL      47
#define EscapeSequence      131
#define UPPER      124
#define L_BRACKET      68
#define TAG_DESCRIPTOR      113
#define MODULE_VERSION      103
#define NODE_INFO      111
#define TAGS_LITERAL      77
#define Exponent      127
#define FALSE_LITERAL      9
#define PRESENT_LITERAL      60
#define DEFINITIONS_LITERAL      80
#define EXTENSIBILITY_LITERAL      74
#define OBJECT_LITERAL      92
#define EXPLICIT_LITERAL      76
#define NODE_NAME      117
#define COMPONENTS_LITERAL      43
#define EXTENSTIONENDMARKER      120
#define TYPE_IDENTIFIER_LITERAL      63
#define A_ROND_DOT      98
#define COMMA      27
#define TRUE_SMALL_LITERAL      19
#define IDENTIFIER      118
#define ENCODED_LITERAL      99
#define BY_LITERAL      97
#define PRIVATE_LITERAL      89
#define PIPE      50
#define A_ROND      4
#define PRINTABLE_STRING_LITERAL      23
#define DIGIT      123
#define DOT      10
#define L_PARAN      28
#define TAG_DEFINITIONS      114
#define TYPE_NODE      107
#define UNIQUE_LITERAL      66
#define UNIVERSAL_LITERAL      87
#define MIN_LITERAL      54
#define MINUS_INFINITY_LITERAL      34
#define GREATER_THAN      16
#define HSTRING      130
#define WITH_LITERAL      58
#define IMPORTS_LITERAL      72
#define AMPERSAND      14
#define SIZE_LITERAL      56
#define R_BRACE      26
#define MINUS      30
#define R_BRACKET      69
#define IMPLIED_LITERAL      75
#define FROM_LITERAL      57
#define COLON      85
#define BOOLEAN_LITERAL      7
#define PDV_LITERAL      91
#define EXPORTS_NODE      109
#define SHASH_GREATER_THEN      18
#define TAG_SPECIFIC      116
#define VALUE_NODE      106
#define CONTAINING_LITERAL      37
#define EXCLAM      46
#define BODY_NODE      112
#define UNRESTRICTEDCHARACTERSTRINGTYPE      122
#define IA5_STRING_LITERAL      22
#define CONSTRAINED_LITERAL      96
#define INTERSECTION_LITERAL      52
#define OF_LITERAL      44
#define MODULE_ROOT      101
#define DOUBLE_R_BRACKET      84
#define MAX_LITERAL      55
#define HEXDIGIT      129
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for asn1Lexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
